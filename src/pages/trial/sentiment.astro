---
import Layout from '../../layouts/Layout.astro';
import SpellButton from '../../components/SpellButton.astro';
---

<Layout title="Sentimentus Revealo | Magus Locale">
  <div class="mb-6">
    <a href="/" class="text-primary-600 hover:text-primary-800 transition-colors">&larr; Powr√≥t</a>
  </div>
  
  <h1 class="text-3xl font-bold text-primary-800 mb-2">Sentimentus Revealo</h1>
  <p class="text-lg text-gray-600 mb-8">Klasyfikuje sentyment jako pozytywny, neutralny lub negatywny.</p>
  
  <div id="model-selector" class="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
    <h3 class="font-medium text-blue-700 mb-2">Wybierz model:</h3>
    <div class="flex items-center">
      <select 
        id="model" 
        class="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
      >
        <option value="" disabled selected>≈Åadowanie modeli...</option>
      </select>
      <button 
        id="refresh-models" 
        class="ml-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-md transition-colors"
        title="Od≈õwie≈º listƒô modeli"
      >
        <span class="block transform rotate-0 transition-transform duration-500">‚Üª</span>
      </button>
    </div>
    <p id="model-loading" class="text-sm text-blue-600 mt-2">≈Åadowanie listy dostƒôpnych modeli...</p>
  </div>
  
  <form id="sentimentForm" class="bg-white rounded-lg shadow-md p-6 mb-8">
    <div class="mb-6">
      <label for="text" class="block text-gray-700 font-medium mb-2">Tekst do analizy</label>
      <textarea
        id="text"
        name="text"
        rows="6"
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
        required
      ></textarea>
    </div>

    <div class="flex justify-center">
      <SpellButton text="Rzuƒá Sentimentus Revealo" client:load />
    </div>
  </form>

  <div id="result" class="hidden bg-white rounded-lg shadow-md p-6 mb-8">
    <h2 class="text-xl font-bold text-primary-800 mb-4">Wynik zaklƒôcia:</h2>
    <div id="resultContent" class="bg-gray-100 p-4 rounded-md"></div>
  </div>

  <div id="loading" class="hidden text-center">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-primary-500 border-t-transparent"></div>
    <p class="mt-2 text-primary-700">Rzucanie zaklƒôcia...</p>
  </div>

  <div id="error" class="hidden bg-red-100 text-red-700 p-4 rounded-md mb-8"></div>
</Layout>

<script>
  import { ollamaApi } from '../../lib/api';
  import { resultStore, loadingStore, errorStore } from '../../store/trials';

  /**
   * Pobiera listƒô modeli z API i aktualizuje dropdown
   * @param modelSelect - Element select do aktualizacji
   * @param refreshModelsButton - Przycisk od≈õwie≈ºania
   * @param modelLoadingText - Element z tekstem statusu ≈Çadowania
   */
  async function fetchModels(
    modelSelect: HTMLSelectElement,
    refreshModelsButton: HTMLButtonElement,
    modelLoadingText: HTMLParagraphElement
  ) {
    if (!modelSelect || !refreshModelsButton || !modelLoadingText) {
      console.error("Brakuje wymaganych element√≥w DOM dla funkcji fetchModels");
      return;
    }
    
    try {
      modelSelect.disabled = true;
      refreshModelsButton.disabled = true;
      modelLoadingText.textContent = '≈Åadowanie listy dostƒôpnych modeli...';
      modelLoadingText.classList.remove('hidden');
      
      const refreshIcon = refreshModelsButton.querySelector('span');
      if (refreshIcon) {
        refreshIcon.classList.add('animate-spin');
      }
      
      const models = await ollamaApi.getModels();
      
      // Wyczy≈õƒá obecne opcje
      modelSelect.innerHTML = '';
      
      // Dodaj dostƒôpne modele
      if (models && models.length > 0) {
        models.forEach((model: any) => {
          const option = document.createElement('option');
          option.value = model.name;
          option.textContent = `${model.name} (${(model.size / (1024 * 1024)).toFixed(0)}MB)`;
          modelSelect.appendChild(option);
        });
        modelLoadingText.textContent = `Znaleziono ${models.length} modeli`;
        setTimeout(() => {
          modelLoadingText.classList.add('hidden');
        }, 3000);
      } else {
        const option = document.createElement('option');
        option.value = '';
        option.textContent = 'Brak dostƒôpnych modeli';
        option.disabled = true;
        option.selected = true;
        modelSelect.appendChild(option);
        modelLoadingText.textContent = 'Brak dostƒôpnych modeli. Sprawd≈∫, czy Ollama dzia≈Ça prawid≈Çowo.';
      }
    } catch (error) {
      console.error('Error fetching models:', error);
      modelLoadingText.textContent = 'B≈ÇƒÖd podczas ≈Çadowania modeli. Sprawd≈∫ konsolƒô, aby uzyskaƒá wiƒôcej informacji.';
      
      // Dodaj opcjƒô awaryjnƒÖ
      const option = document.createElement('option');
      option.value = 'SpeakLeash/bielik-4.5b-v3.0-instruct:Q8_0';
      option.textContent = 'SpeakLeash/bielik-4.5b-v3.0-instruct:Q8_0 (domy≈õlny)';
      option.selected = true;
      modelSelect.innerHTML = '';
      modelSelect.appendChild(option);
    } finally {
      if (modelSelect && refreshModelsButton) {
        modelSelect.disabled = false;
        refreshModelsButton.disabled = false;
        const refreshIcon = refreshModelsButton.querySelector('span');
        if (refreshIcon) {
          refreshIcon.classList.remove('animate-spin');
        }
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Bezpiecznie pobieramy elementy DOM z walidacjƒÖ
    const form = document.getElementById('sentimentForm') as HTMLFormElement | null;
    const resultDiv = document.getElementById('result') as HTMLDivElement | null;
    const resultContent = document.getElementById('resultContent') as HTMLDivElement | null;
    const loadingDiv = document.getElementById('loading') as HTMLDivElement | null;
    const errorDiv = document.getElementById('error') as HTMLDivElement | null;
    const textInput = document.getElementById('text') as HTMLTextAreaElement | null;
    const modelSelect = document.getElementById('model') as HTMLSelectElement | null;
    const refreshModelsButton = document.getElementById('refresh-models') as HTMLButtonElement | null;
    const modelLoadingText = document.getElementById('model-loading') as HTMLParagraphElement | null;

    // Sprawd≈∫ czy wszystkie elementy zosta≈Çy znalezione
    if (!form || !resultDiv || !resultContent || !loadingDiv || !errorDiv || !textInput || !modelSelect || !refreshModelsButton || !modelLoadingText) {
      console.error("Nie znaleziono wszystkich wymaganych element√≥w DOM");
      return;
    }

    // Pierwsza inicjalizacja listy modeli
    fetchModels(modelSelect, refreshModelsButton, modelLoadingText);

    // Obs≈Çuga przycisku od≈õwie≈ºania
    refreshModelsButton.addEventListener('click', (e) => {
      e.preventDefault();
      fetchModels(modelSelect, refreshModelsButton, modelLoadingText);
    });

    // Mapowanie sentyment√≥w na emoji i klasy kolor√≥w
    const sentimentMap = {
      positive: { emoji: 'üòÉ', text: 'Pozytywny', class: 'text-green-600' },
      neutral: { emoji: 'üòê', text: 'Neutralny', class: 'text-blue-600' },
      negative: { emoji: 'üòû', text: 'Negatywny', class: 'text-red-600' }
    };

    // Subskrypcje do store'√≥w
    loadingStore.subscribe((loading) => {
      if (loadingDiv) {
        loadingDiv.classList.toggle('hidden', !loading);
      }
    });

    resultStore.subscribe((result) => {
      if (!resultDiv || !resultContent || !modelSelect) return;
      
      if (result) {
        resultDiv.classList.remove('hidden');
        try {
          const parsedContent = JSON.parse(result.message?.content || "{}");
          const sentiment = parsedContent.sentiment || "neutral";
          const sentimentInfo = sentimentMap[sentiment] || sentimentMap.neutral;
          
          resultContent.innerHTML = `
            <p class="text-lg font-semibold ${sentimentInfo.class}">
              ${sentimentInfo.emoji} Sentyment: ${sentimentInfo.text}
            </p>
            <p class="text-sm text-gray-600 mt-2">
              Model: ${modelSelect.value}
            </p>
          `;
        } catch (error) {
          if (result.message?.content) {
            resultContent.textContent = result.message.content;
          } else {
            resultContent.textContent = "Otrzymano nieprawid≈ÇowƒÖ odpowied≈∫.";
          }
        }
      } else {
        resultDiv.classList.add('hidden');
      }
    });

    errorStore.subscribe((error) => {
      if (!errorDiv) return;
      
      if (error) {
        errorDiv.classList.remove('hidden');
        errorDiv.textContent = error;
      } else {
        errorDiv.classList.add('hidden');
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!textInput || !modelSelect) {
        errorStore.set('Nie mo≈ºna znale≈∫ƒá wymaganych element√≥w formularza.');
        return;
      }
      
      const text = textInput.value;
      const selectedModel = modelSelect.value;
      
      if (!selectedModel) {
        errorStore.set('Nie wybrano modelu. Poczekaj, a≈º lista modeli siƒô za≈Çaduje lub od≈õwie≈º jƒÖ rƒôcznie.');
        return;
      }
      
      try {
        loadingStore.set(true);
        errorStore.set(null);
        
        const response = await ollamaApi.analyzeSentiment(text, selectedModel);
        resultStore.set(response);
      } catch (error) {
        errorStore.set(error instanceof Error ? error.message : 'WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zapytania.');
        resultStore.set(null);
      } finally {
        loadingStore.set(false);
      }
    });
  });
</script>
